name: Mars Rover Monitoring Status
run-name: This is being automatically tested out by GitHub Actions
on:
  schedule:
    - cron: '0 7 * * *'
  # workflow_dispatch:


permissions:
  contents: write
  actions: read

jobs:
  MRM-Status:
    runs-on: ubuntu-latest
    steps:
    - name: Env Info
      run: |
        echo "The job was automatically triggered by a ${{ github.event_name }} event."
        echo "This job is now running on a ${{ runner.os }} server hosted by GitHub!"
        echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

    - name: Check out this repo
      uses: actions/checkout@v3

    - name: Repo Info
      run: |
        echo "The ${{ github.repository }} repository has been cloned to the runner."
        echo "The workflow is now ready to test your code on the runner."

    - name: List files in the repository
      run: |
        ls ${{ github.workspace }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10.16'

    - name: Set up browser
      uses: browser-actions/setup-chrome@latest
    - run: chrome --version

    - name: Cache dependencies (pip + Playwright browsers)
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/ms-playwright
        key: cache-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          cache-${{ runner.os }}-

    - name: Install the necessary packages
      run: |
        pip install -r requirements.txt
        playwright install --with-deps chromium
        pip install "click>=8.1.8"

    - name: MRM status
      run: |
        python mars_rover_missions.py
        echo "This job's status is ${{ job.status }}."

    - name: Get Last Successful Run ID
      id: get_last_run
      run: |
        REPO="${{ github.repository }}"
        WORKFLOW_NAME="monitoring_status.yml"

        RUN_ID=$(gh api "repos/$REPO/actions/workflows/$WORKFLOW_NAME/runs?status=success&per_page=1" | jq '.workflow_runs[0].id')

        if [[ -n "$RUN_ID" ]]; then
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
          echo "Last successful run ID: $RUN_ID"
        else
          echo "No successful runs found for workflow: $WORKFLOW_ID_OR_NAME"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Download previous artifacts
      uses: actions/download-artifact@v4
      with:
        name: json-artifacts
        path: previous_json
        run-id: ${{ steps.get_last_run.outputs.run_id }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Compare JSON files and store differences
      run: |
        mkdir -p json_diffs
        if [ -d "previous_json" ] && [ "$(ls -A previous_json)" ]; then
          echo "Comparing JSON files with the previous run:"
          for file in monitoring/rovers/fixtures/*.json; do
            filename=$(basename "$file")
            python tools/updates.py previous_json/$filename $file json_diffs/$filename
          rm -rf previous_json/*
          cp -r monitoring/rovers/fixtures/* previous_json/
          done
        else
          echo "No previous artifacts found. Skipping comparison."
          cp -r monitoring/rovers/fixtures/* json_diffs/
          mkdir -p previous_json
          cp -r monitoring/rovers/fixtures/* previous_json/
        fi

    - name: Checking on the diff files
      run: |
        ls json_diffs

    - name: Upload JSON files as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: json-artifacts
        path: previous_json/
        retention-days: 3

    - name: Upload JSON differences as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: json-diffs
        path: json_diffs/
        retention-days: 3

    - name: Generate HTML Pages
      run: |
        for file in previous_json/*.json; do
          filename=$(basename "$file")
          echo "File name: $filename"
          python3 docs/generate_pages.py $file
        done
        for file in json_diffs/*.json; do
          filename=$(basename "$file")
          echo "File name: $filename"
          python3 docs/generate_pages.py $file
        done

    - name: List docs
      run: |
        ls docs

    - name: Commit and Push to gh-pages
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        git fetch
        git checkout gh-pages
        cp -r docs/* gh_docs/
        git add gh_docs/* *.md
        git commit -m "Deploy JSON Tables with Tabulator.js"
        git push --force origin gh-pages
      continue-on-error: true

    - name: Enable GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages
        publish_dir: .
